package com.rft.rft_be.service.DriverLicense;

import com.rft.rft_be.dto.driverLicense.CreateDriverLicenseDTO;
import com.rft.rft_be.dto.driverLicense.DriverLicenseDTO;
import com.rft.rft_be.entity.DriverLicense;
import com.rft.rft_be.entity.User;
import com.rft.rft_be.mapper.DriverLicenseMapper;
import com.rft.rft_be.repository.DriverLicensRepository;
import com.rft.rft_be.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class DriverLicenseServiceImpl implements DriverLicenseService {

    private final DriverLicensRepository driverLicenseRepository;
    private final DriverLicenseMapper driverLicenseMapper;
    private final UserRepository userRepository;

    @Override
    public List<DriverLicenseDTO> getAllDriverLicenses() {
        List<DriverLicense> driverLicenses = driverLicenseRepository.findAll();
        return driverLicenses.stream()
                .map(driverLicenseMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Override
    public DriverLicenseDTO getDriverLicenseById(String id) {
        DriverLicense driverLicense = driverLicenseRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Driver license not found with id: " + id));
        return driverLicenseMapper.toDTO(driverLicense);
    }

    @Override
    public List<DriverLicenseDTO> getDriverLicensesByUserId(String userId) {
        List<DriverLicense> driverLicenses = driverLicenseRepository.findByUserId(userId);
        return driverLicenses.stream()
                .map(driverLicenseMapper::toDTO)
                .collect(Collectors.toList());
    }

    @Override
    public List<DriverLicenseDTO> getDriverLicensesByStatus(String status) {
        try {
            DriverLicense.Status licenseStatus = DriverLicense.Status.valueOf(status.toUpperCase());
            List<DriverLicense> driverLicenses = driverLicenseRepository.findByStatus(licenseStatus);
            return driverLicenses.stream()
                    .map(driverLicenseMapper::toDTO)
                    .collect(Collectors.toList());
        } catch (IllegalArgumentException e) {
            throw new RuntimeException("Invalid status: " + status + ". Valid values are: VALID, EXPIRED");
        }
    }

    @Override
    public DriverLicenseDTO getDriverLicenseByLicenseNumber(String licenseNumber) {
        DriverLicense driverLicense = driverLicenseRepository.findByLicenseNumber(licenseNumber)
                .orElseThrow(() -> new RuntimeException("Driver license not found with license number: " + licenseNumber));
        return driverLicenseMapper.toDTO(driverLicense);
    }

    @Override
    @Transactional
    public DriverLicenseDTO createDriverLicense(CreateDriverLicenseDTO createDriverLicenseDTO) {
        // Validate required fields
        if (createDriverLicenseDTO.getUserId() == null || createDriverLicenseDTO.getUserId().trim().isEmpty()) {
            throw new RuntimeException("User ID is required");
        }
        if (createDriverLicenseDTO.getLicenseNumber() == null || createDriverLicenseDTO.getLicenseNumber().trim().isEmpty()) {
            throw new RuntimeException("License number is required");
        }

        // Check if license number already exists
        boolean exists = driverLicenseRepository.existsByLicenseNumber(createDriverLicenseDTO.getLicenseNumber());
        if (exists) {
            throw new RuntimeException("Driver license with number " + createDriverLicenseDTO.getLicenseNumber() + " already exists");
        }

        // Validate user exists
        User user = userRepository.findById(createDriverLicenseDTO.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found with id: " + createDriverLicenseDTO.getUserId()));

        // Create new driver license entity (ID will be auto-generated by @GeneratedValue)
        DriverLicense driverLicense = DriverLicense.builder()
                .user(user)
                .licenseNumber(createDriverLicenseDTO.getLicenseNumber())
                .classField(createDriverLicenseDTO.getClassField())
                .image(createDriverLicenseDTO.getImage())
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();

        // Set status with validation
        if (createDriverLicenseDTO.getStatus() != null && !createDriverLicenseDTO.getStatus().trim().isEmpty()) {
            try {
                DriverLicense.Status status = DriverLicense.Status.valueOf(createDriverLicenseDTO.getStatus().toUpperCase());
                driverLicense.setStatus(status);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException("Invalid status: " + createDriverLicenseDTO.getStatus() + ". Valid values are: VALID, EXPIRED");
            }
        } else {
            driverLicense.setStatus(DriverLicense.Status.VALID);
        }

        // Save driver license
        DriverLicense savedDriverLicense = driverLicenseRepository.save(driverLicense);
        return driverLicenseMapper.toDTO(savedDriverLicense);
    }

    @Override
    @Transactional
    public DriverLicenseDTO updateDriverLicense(String id, DriverLicenseDTO driverLicenseDTO) {
        // Find existing driver license
        DriverLicense existingDriverLicense = driverLicenseRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Driver license not found with id: " + id));

        // Update fields (only update non-null values from DTO)
        if (driverLicenseDTO.getLicenseNumber() != null && !driverLicenseDTO.getLicenseNumber().trim().isEmpty()) {
            // Check if new license number already exists (excluding current record)
            if (!existingDriverLicense.getLicenseNumber().equals(driverLicenseDTO.getLicenseNumber())) {
                boolean exists = driverLicenseRepository.existsByLicenseNumber(driverLicenseDTO.getLicenseNumber());
                if (exists) {
                    throw new RuntimeException("Driver license with number " + driverLicenseDTO.getLicenseNumber() + " already exists");
                }
            }
            existingDriverLicense.setLicenseNumber(driverLicenseDTO.getLicenseNumber());
        }

        if (driverLicenseDTO.getClassField() != null) {
            existingDriverLicense.setClassField(driverLicenseDTO.getClassField());
        }

        if (driverLicenseDTO.getStatus() != null && !driverLicenseDTO.getStatus().trim().isEmpty()) {
            try {
                DriverLicense.Status status = DriverLicense.Status.valueOf(driverLicenseDTO.getStatus().toUpperCase());
                existingDriverLicense.setStatus(status);
            } catch (IllegalArgumentException e) {
                throw new RuntimeException("Invalid status: " + driverLicenseDTO.getStatus() + ". Valid values are: VALID, EXPIRED");
            }
        }

        if (driverLicenseDTO.getImage() != null) {
            existingDriverLicense.setImage(driverLicenseDTO.getImage());
        }

        // Update timestamp
        existingDriverLicense.setUpdatedAt(LocalDateTime.now());

        // Save and return updated driver license
        DriverLicense updatedDriverLicense = driverLicenseRepository.save(existingDriverLicense);
        return driverLicenseMapper.toDTO(updatedDriverLicense);
    }

    @Override
    @Transactional
    public void deleteDriverLicense(String id) {
        boolean exists = driverLicenseRepository.existsById(id);
        if (!exists) {
            throw new RuntimeException("Driver license not found with id: " + id);
        }
        driverLicenseRepository.deleteById(id);
    }
}
